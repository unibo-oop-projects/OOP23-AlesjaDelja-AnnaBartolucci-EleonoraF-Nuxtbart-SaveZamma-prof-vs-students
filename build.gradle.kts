/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */
plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    
    id("org.openjfx.javafxplugin") version "0.0.9"
    //id("com.github.johnrengelman.shadow") version "7.1.2"

    /*
     * Adds tasks to export a runnable jar.
     * In order to create it, launch the "shadowJar" task.
     * The runnable jar will be found in build/libs/projectname-all.jar
     */
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("org.danilopianini.gradle-java-qa") version "1.52.0"

    id("org.danilopianini.unibo-oop-gradle-plugin") version "1.0.12"}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

javafx {
    modules = listOf("javafx.controls", "javafx.fxml", "javafx.media") 
}



val javaFXModules = listOf("base", "controls", "fxml", "swing", "graphics", "media")
val supportedPlatforms = listOf("linux", "mac", "win")
val jUnitVersion = "5.10.2"
val javaFxVersion = "15"

dependencies {
    // Dipendenza per javafx.media
    // implementation("org.openjfx:javafx-media:$javaFxVersion:$platform")
     // Suppressions for SpotBugs
    compileOnly("com.github.spotbugs:spotbugs-annotations:4.8.5")
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.1")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("org.apache.commons:commons-math3:3.6.1")

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.guava:guava:31.1-jre")
    
    // JavaFX: comment out if you do not need them
    supportedPlatforms.forEach { platform ->
        javaFXModules.forEach { module ->
            implementation("org.openjfx:javafx-$module:$javaFxVersion:$platform")
        }
    }
    
    // JUnit API and testing engine
    testImplementation("org.junit.jupiter:junit-jupiter-api:$jUnitVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$jUnitVersion")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.withType<JavaExec> {
    maxHeapSize = "8g"
}

application {
    mainClass.set("oopdevelopgradle.model.Main")
}

tasks.jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    val runtimeClasspathFiles = configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }
    from(runtimeClasspathFiles.map { zipTree(it) })
    
    manifest {
        attributes(
            "Main-Class" to "oopdevelopgradle.model.Main"
        )
    }
}

// Configure the shadowJar task to create a fat JAR
/*tasks.withType<com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar> {
    archiveClassifier.set("")
    manifest {
        attributes(
            "Main-Class" to "oopdevelopgradle.model.Main"
        )
    }
    mergeServiceFiles()
    // Include all necessary native libraries
    from({
        configurations.runtimeClasspath.get().files.filter { it.name.endsWith("jar") }.map { fileTree(it) }
    })
}

// Make the shadowJar task depend on the classes task
tasks.named("shadowJar") {
    dependsOn(tasks.named("classes"))
}

// Set the shadowJar task as the default task for building the project
tasks.named("build") {
    dependsOn(tasks.named("shadowJar"))
}*/
 java { toolchain { languageVersion.set(JavaLanguageVersion.of(17)) } }